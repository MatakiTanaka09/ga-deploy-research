# This is a basic workflow to help you get started with Actions

name: (ステージ環境) バックエンドのデプロイ

# Controls when the action will run.
on:
  push:
    branches: [main]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      public_ip: ${{ steps.print_ip.outputs.public-id }}
    steps:
      - name: Public IPの取得
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Public IPをアウトプットに確認する
        id: print_ip
        run: |
          echo "::set-output name=public-id::$(echo ${{ steps.ip.outputs.ipv4 }})"

      - name: AWS CLIをインストール
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          aws --version
  open_ssh_port:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: AWS CLIのセットアップ
        run: |
          printf "${AWS_ACCESS_KEY_ID}\n${AWS_SECRET_ACCESS_KEY}\nap-northeast-1\njson\n" | aws configure --profile monoinv-dev
          aws configure get aws_access_key_id --profile monoinv-dev
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: SSHポートの開放
        run: |
          IP_ADDRESS=`echo ${{ needs.setup.outputs.public_ip }}`
          aws --profile monoinv-dev ec2 authorize-security-group-ingress --group-id ${DEV_AWS_SECURITY_GROUP} --protocol tcp --port ${SSH_PORT_22} --cidr "$IP_ADDRESS"/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SSH_PORT_22: ${{ secrets.SSH_PORT_22 }}
          DEV_AWS_SECURITY_GROUP: ${{ secrets.DEV_AWS_SECURITY_GROUP }}
  # This workflow contains a single job called "build"
  deploy01:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: open_ssh_port
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: 多段SSH接続 + DB マイグレーション + バックエンドデプロイ
        run: |
          echo ${CHECKOUT_REF}
          echo "deploy01"
  deploy02:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: deploy01
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
      - name: 多段SSH接続 + DB マイグレーション + バックエンドデプロイ
        run: |
          echo ${CHECKOUT_REF}
          echo "${BASTION_PRIVATE_KEY}" > bastion_private_key && chmod 600 bastion_private_key
          echo "${WEB_PRIVATE_KEY}" > web_private_key && chmod 600 web_private_key
          ssh -tt -o ProxyCommand='ssh -o StrictHostKeyChecking=no -i bastion_private_key -p ${SSH_PORT_22} -W %h:%p ${EC2_USER_NAME}@${DEV_AWS_BASTION_HOST_NAME}' -o StrictHostKeyChecking=no -i web_private_key -p ${SSH_PORT_22} ${EC2_USER_NAME}@${DEV_AWS_WEB_HOST_NAME} "
            sudo -u root sh -c 'cd /root/monoinvestment/ &&
                                git fetch --all &&
                                git checkout ${GITHUB_REF#refs/heads/} &&
                                git reset --hard origin/${GITHUB_REF#refs/heads/} &&
                                MONO_STAGING_LEVEL=STAGE sh ./backend/deploy-scripts/install_and_restart_backend_server.sh'
          "
        env:
          EC2_USER_NAME: ${{ secrets.EC2_USER_NAME }}
          BASTION_PRIVATE_KEY: ${{ secrets.BASTION_PRIVATE_KEY }}
          WEB_PRIVATE_KEY: ${{ secrets.WEB_PRIVATE_KEY }}
          DEV_AWS_BASTION_HOST_NAME: ${{ secrets.DEV_AWS_BASTION_HOST_NAME }}
          DEV_AWS_WEB_HOST_NAME: ${{ secrets.DEV_AWS_WEB_HOST_NAME }}
          SSH_PORT_22: ${{ secrets.SSH_PORT_22 }}
  close_ssh_port:
    runs-on: ubuntu-latest
    needs: [setup, deploy01, deploy02]
    steps:
      - name: AWS CLIのセットアップ
        run: |
          printf "${AWS_ACCESS_KEY_ID}\n${AWS_SECRET_ACCESS_KEY}\nap-northeast-1\njson\n" | aws configure --profile monoinv-dev
          aws configure get aws_access_key_id --profile monoinv-dev
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: SSHポートの閉鎖
        run: |
          IP_ADDRESS=`echo ${{ needs.setup.outputs.public_ip }}`
          aws --profile monoinv-dev ec2 revoke-security-group-ingress --group-id ${DEV_AWS_SECURITY_GROUP} --protocol tcp --port ${SSH_PORT_22} --cidr "$IP_ADDRESS"/32
        if: ${{ always() }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SSH_PORT_22: ${{ secrets.SSH_PORT_22 }}
          DEV_AWS_SECURITY_GROUP: ${{ secrets.DEV_AWS_SECURITY_GROUP }}
